name: Build and Publish Multi-arch Docker Image Test

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: ''
        required: false

env:
  DOCKERHUB_REPO: hoshinoneko/xrayr
  GHCR_REPO: ghcr.io/hoshinoneko/xrayr
  BASE_TAG: ${{ github.event.release.tag_name || inputs.tag || github.ref_name }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.determine-tag.outputs.tag }}
      repo_name: ${{ steps.set-repo-name.outputs.repo_name }}
    steps:
      - name: Determine tag
        id: determine-tag
        run: |
          if [ -n "${{ github.event.release.tag_name }}" ]; then
            echo "Using release tag: ${{ github.event.release.tag_name }}"
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.tag }}" ]; then
            echo "Using input tag: ${{ inputs.tag }}"
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "Using branch name: ${{ github.ref_name }}"
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Normalize platform names
        id: normalize-platform
        run: |
          normalized_arch=$(echo "${{ matrix.platform }}" | awk -F/ '{print $NF}' | sed 's/v//')
          echo "normalized_arch=${normalized_arch}" >> $GITHUB_OUTPUT
      - name: Set repository name
        id: set-repo-name
        run: |
          echo "repo_name=hoshinoneko/xrayr" >> $GITHUB_OUTPUT

  build-binaries:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
            goarch: arm64
          - os: linux
            arch: armv7
            goarch: arm
            goarm: 7
          - os: linux
            arch: armv6
            goarch: arm
            goarm: 6
          - os: linux
            arch: s390x
          - os: windows
            arch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'

      - name: Cross-compile binaries
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.goarch || matrix.target.arch }}
          GOARM: ${{ matrix.target.goarm || '' }}
        run: |
          output_name="XrayR-${{ matrix.target.os }}-${{ matrix.target.arch }}"
          if [ "${{ matrix.target.os }}" = "windows" ]; then
            output_name="$output_name.exe"
          fi
          CGO_ENABLED=0 go build -v -o $output_name -trimpath -ldflags "-s -w -buildid="
          mkdir -p release
          mv $output_name release/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: XrayR-${{ matrix.target.os }}-${{ matrix.target.arch }}
          path: release/

  build-and-push:
    needs: [setup, build-binaries]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          linux/amd64,
          linux/arm64,
          linux/arm/v7,
          linux/arm/v6,
          linux/s390x,
          windows/amd64
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Convert platform to artifact name
        id: platform-convert
        run: |
          artifact_name=$(echo "${{ matrix.platform }}" | sed 's/\//-/g' | sed 's/arm-/arm/g')
          echo "artifact_name=XrayR-$artifact_name" >> $GITHUB_OUTPUT
          echo "Converted ${{ matrix.platform }} to XrayR-$artifact_name"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.platform-convert.outputs.artifact_name }}
          path: release/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract and normalize platform info
        id: platform
        run: |
          IFS='/' read -r os arch <<< "${{ matrix.platform }}"
          # 标准化架构名称 (arm/v6 → armv6)
          normalized_arch=$(echo "$arch" | sed 's|/||g')
          echo "os=${os}" >> $GITHUB_OUTPUT
          echo "arch=${arch}" >> $GITHUB_OUTPUT
          echo "normalized_arch=${normalized_arch}" >> $GITHUB_OUTPUT

      - name: Prepare Dockerfile
        run: |
          os="${{ steps.platform.outputs.os }}"
          normalized_arch="${{ steps.platform.outputs.normalized_arch }}"
          arch="${{ steps.platform.outputs.arch }}"
          echo Preaped Dockfile Dockerfile.$os.$normalized_arch
          if [ "$os" = "windows" ]; then
            echo "FROM mcr.microsoft.com/windows/nanoserver:1809" > "Dockerfile.$os.$normalized_arch"
            echo "COPY release/XrayR-windows-amd64.exe XrayR.exe" >> "Dockerfile.$os.$normalized_arch"
            echo 'ENTRYPOINT ["XrayR.exe", "--config", "C:\\etc\\XrayR\\config.yml"]' >> "Dockerfile.$os.$normalized_arch"
          else
            echo "FROM alpine" > "Dockerfile.$os.$normalized_arch"
            echo "RUN apk --update --no-cache add tzdata ca-certificates \\" >> "Dockerfile.$os.$normalized_arch"
            echo " && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime" >> "Dockerfile.$os.$normalized_arch"
            echo "RUN mkdir /etc/XrayR/" >> "Dockerfile.$os.$normalized_arch"
            echo "COPY release/XrayR-$os-$normalized_arch /usr/local/bin/XrayR" >> "Dockerfile.$os.$normalized_arch"
            echo 'ENTRYPOINT ["XrayR", "--config", "/etc/XrayR/config.yml"]' >> "Dockerfile.$os.$normalized_arch"
          fi
          echo "Dockerfile directory: $(pwd)"
          echo "Target file: Dockerfile.$os.$normalized_arch"
          ls -lha Dockerfile.$os.$normalized_arch

      - name: Build and push platform-specific image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.${{ steps.platform.outputs.os }}.${{ steps.platform.outputs.normalized_arch }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ needs.setup.outputs.tag }}-${{ steps.platform.outputs.os }}-${{ steps.platform.outputs.normalized_arch }}
            ${{ env.GHCR_REPO }}:${{ needs.setup.outputs.tag }}-${{ steps.platform.outputs.os }}-${{ steps.platform.outputs.normalized_arch }}

  create-manifest:
    needs: [setup, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push Docker Hub manifest
        run: |
          # 检查并删除现有的 manifest（如果存在）
          docker manifest rm $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }} 2>/dev/null || true
          
          # 检查镜像是否存在，只添加存在的镜像
          images_to_add=""
          platforms=("linux-amd64" "linux-arm64" "linux-armv7" "linux-armv6" "linux-s390x" "windows-amd64")
          
          for platform in "${platforms[@]}"; do
            if docker manifest inspect $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }}-$platform >/dev/null 2>&1; then
              echo "Found image for platform: $platform"
              images_to_add="$images_to_add --amend $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }}-$platform"
            else
              echo "Image not found for platform: $platform, skipping"
            fi
          done
          
          if [ -n "$images_to_add" ]; then
            # 使用 buildx imagetools 创建 manifest（更可靠）
            image_list=""
            for platform in "${platforms[@]}"; do
              if docker manifest inspect $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }}-$platform >/dev/null 2>&1; then
                image_list="$image_list $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }}-$platform"
              fi
            done
          
            docker buildx imagetools create -t $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }} $image_list
            echo "Successfully created manifest for $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }}"
          else
            echo "No valid images found to create manifest"
            exit 1
          fi
          
          # 如果是 release 事件，创建 latest 标签
          if [[ "${{ github.event_name }}" == "release" || "${{ github.ref }}" == refs/tags/* ]]; then
            echo "Creating latest tag manifest..."
            docker buildx imagetools create -t $DOCKERHUB_REPO:latest $image_list
            echo "Successfully created latest manifest"
          else
            echo "Not a release event, skipping latest tag creation"
          fi
        env:
          DOCKERHUB_REPO: ${{ env.DOCKERHUB_REPO }}

      - name: Create and push GHCR manifest
        run: |
          # 检查并删除现有的 manifest（如果存在）
          docker manifest rm $GHCR_REPO:${{ needs.setup.outputs.tag }} 2>/dev/null || true
          
          # 检查镜像是否存在，只添加存在的镜像
          platforms=("linux-amd64" "linux-arm64" "linux-armv7" "linux-armv6" "linux-s390x" "windows-amd64")
          image_list=""
          
          for platform in "${platforms[@]}"; do
            if docker manifest inspect $GHCR_REPO:${{ needs.setup.outputs.tag }}-$platform >/dev/null 2>&1; then
              echo "Found GHCR image for platform: $platform"
              image_list="$image_list $GHCR_REPO:${{ needs.setup.outputs.tag }}-$platform"
            else
              echo "GHCR image not found for platform: $platform, skipping"
            fi
          done
          
          if [ -n "$image_list" ]; then
            docker buildx imagetools create -t $GHCR_REPO:${{ needs.setup.outputs.tag }} $image_list
            echo "Successfully created GHCR manifest for $GHCR_REPO:${{ needs.setup.outputs.tag }}"
          
            # 如果是 release 事件，创建 latest 标签
            if [[ "${{ github.event_name }}" == "release" || "${{ github.ref }}" == refs/tags/* ]]; then
              echo "Creating GHCR latest tag manifest..."
              docker buildx imagetools create -t $GHCR_REPO:latest $image_list
              echo "Successfully created GHCR latest manifest"
            fi
          else
            echo "No valid GHCR images found to create manifest"
            exit 1
          fi
        env:
          GHCR_REPO: ${{ env.GHCR_REPO }}

      - name: Verify manifests
        run: |
          echo "=== Verifying Docker Hub manifest ==="
          docker manifest inspect $DOCKERHUB_REPO:${{ needs.setup.outputs.tag }}
          
          echo "=== Verifying GHCR manifest ==="
          docker manifest inspect $GHCR_REPO:${{ needs.setup.outputs.tag }}
          
          if [[ "${{ github.event_name }}" == "release" || "${{ github.ref }}" == refs/tags/* ]]; then
            echo "=== Verifying latest tags ==="
            docker manifest inspect $DOCKERHUB_REPO:latest
            docker manifest inspect $GHCR_REPO:latest
          fi
        env:
          DOCKERHUB_REPO: ${{ env.DOCKERHUB_REPO }}
          GHCR_REPO: ${{ env.GHCR_REPO }}
